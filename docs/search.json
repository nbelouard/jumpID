[{"path":"https://nbelouard.github.io/jumpID/articles/010_Jump_list.html","id":"aim-and-setup","dir":"Articles","previous_headings":"","what":"Aim and setup","title":"#1: Isolating dispersal jumps and diffusive spread","text":"spread invasive species due diffusive spread human-assisted jump dispersal, often caused species hitchhiking vehicles. aim vignette differentiate diffusive spread jump dispersal invasive species based occurrence data. identification required development directional analysis species presence. demonstrate method using occurrence data spotted lanternfly, Lycorma delicatula, invasive Hemiptera United States. load necessary packages.","code":"library(magrittr) library(ggplot2) library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(jumpID)"},{"path":"https://nbelouard.github.io/jumpID/articles/010_Jump_list.html","id":"data-overlook","dir":"Articles","previous_headings":"","what":"1. Data overlook","title":"#1: Isolating dispersal jumps and diffusive spread","text":"SLF dataset available lydemapr companion package. download_data folder, v2_2023 subfolder, download lyde_data_v2.zip file place data folder local jumpID project. date vignette written, lydemapr contains data year 2022. load dataset contains occurrences spotted lanternfly, take look . dataset contains 831,039 rows, corresponding SLF survey specific date location. columns using : * bio_year: biological year occurrence (see lydemapr description difference year bio_year) * latitude longitude (XY coordinates). precise location SLF surveys summarized 1-km² cells. coordinates WGS84 (EPSG 4326) * lyde_established: whether established SLF population found survey (least two live individuals egg mass, see lydemapr)","code":"slf <- read.csv(file.path(here::here(), \"data\", \"lyde_data_v2\", \"lyde.csv\")) slf %<>% select(bio_year, latitude, longitude, lyde_established)  tibble::tibble(slf) ## # A tibble: 831,039 × 4 ##    bio_year latitude longitude lyde_established ##       <int>    <dbl>     <dbl> <lgl>            ##  1     2015     40.4     -75.7 FALSE            ##  2     2016     40.3     -75.6 FALSE            ##  3     2016     40.4     -75.5 FALSE            ##  4     2016     40.4     -75.6 FALSE            ##  5     2016     40.4     -75.7 FALSE            ##  6     2016     40.5     -75.6 FALSE            ##  7     2016     40.6     -75.5 FALSE            ##  8     2016     40.4     -75.7 FALSE            ##  9     2016     40.4     -75.6 FALSE            ## 10     2017     40.1     -75.5 FALSE            ## # ℹ 831,029 more rows"},{"path":"https://nbelouard.github.io/jumpID/articles/010_Jump_list.html","id":"data-formatting","dir":"Articles","previous_headings":"","what":"2. Data formatting","title":"#1: Isolating dispersal jumps and diffusive spread","text":"First, use jumpID package, need rename columns generic names expected package. also remove rows SLF establishment NA. Second, multiple surveys sometimes conducted location year, resulting redundant dataset purpose analysis. summarize information available location every year, row now represents detection status location given year. Note: several surveys indicate SLF “present” year location, tempting categorize SLF “established”. However, category “present” often refers dead individuals, although information explicitly available. use conservative approach consider SLF established cell one surveys considered established. dataset now 123,532 rows, corresponding 1280 x 1596 cells. Let’s look data map.  Cells predominantly surveyed Eastern US, also cells surveyed parts US, starting 2019. Positive cells (established SLF) Eastern US, maps zoomed Eastern US . Every year, large number cells surveyed positive (SLF established) negative results (SLF established). zoomed-map allows see cell grid.  progression invasion measured starting introduction point documented Barringer et al. 2015. store coordinates introduction point object next analyses. precise introduction point unknown, may replaced centroid invasion time invasive species discovered invasive range. finish preparing dataset analysis, calculate distance survey cell introduction point. dataset now ready jump analysis.","code":"slf %<>% rename(year = bio_year,                 established = lyde_established) %>%    filter(is.na(established) == F) grid_data <- slf %>%   dplyr::group_by(year, latitude, longitude) %>%   dplyr::summarise(established = any(established)) %>%    ungroup() ## `summarise()` has grouped output by 'year', 'latitude'. You can override using ## the `.groups` argument. tibble::tibble(grid_data) ## # A tibble: 123,542 × 4 ##     year latitude longitude established ##    <int>    <dbl>     <dbl> <lgl>       ##  1  2014     39.8     -76.8 FALSE       ##  2  2014     39.8     -76.3 FALSE       ##  3  2014     39.8     -76.4 FALSE       ##  4  2014     39.9     -76.6 FALSE       ##  5  2014     39.9     -76.9 FALSE       ##  6  2014     39.9     -76.5 FALSE       ##  7  2014     39.9     -76.8 FALSE       ##  8  2014     39.9     -76.8 FALSE       ##  9  2014     39.9     -76.2 FALSE       ## 10  2014     39.9     -76.8 FALSE       ## # ℹ 123,532 more rows # get a simple feature object for states states <- sf::st_as_sf(maps::map(\"state\", plot = FALSE, fill = TRUE)) %>%    sf::st_transform(crs = 4326)  # Map all surveys #| fig.alt: > #|   A map of the US states showing the location of SLF surveys ggplot(data = states) +   geom_point(data = grid_data, aes(x = longitude, y = latitude)) +   xlab(\"Longitude\") + ylab(\"Latitude\") +   geom_sf(data = states, alpha = 0) +   facet_wrap(~year) +   theme_classic() #| fig.alt: > #|   A zoomed-in map showing that survey points are aligned on a grid ggplot(data = states) +   geom_point(data = grid_data, aes(x = longitude, y = latitude,                                     col = established), size = 1) +   scale_color_manual(values = c(\"gray\", \"black\")) +   labs(col = \"SLF established\") +   xlab(\"Longitude\") + ylab(\"Latitude\") +   geom_sf(data = states, alpha = 0) +   coord_sf(xlim = c(-78.5, -78), ylim = c(39, 39.5), expand = FALSE) +   theme(legend.position = \"bottom\") # Coordinates of the introduction site, extracted from Barringer et al. 2015 # As a table (for distance calculations): centroid_df <- data.frame(longitude = -75.675340,                          latitude = 40.415240)    # Replace by the centroid of the invasion in the first years of the invasion if the  # introduction point is unknown: # centroid_df <- slf %>% filter(year == 2014) %>% #   summarise(latitude = mean(.$latitude), #             longitude = mean(.$longitude)) grid_data %<>%    dplyr::mutate(DistToIntro = geosphere::distGeo(grid_data[,c('longitude','latitude')],                                                  centroid_df[,c('longitude', 'latitude')])/1000)  # the distance is obtained in meters, and we divide it by 1000 to obtain kilometers  # given the scale of this invasion.  summary(grid_data) ##       year         latitude       longitude       established     ##  Min.   :2014   Min.   :29.48   Min.   :-123.27   Mode :logical   ##  1st Qu.:2019   1st Qu.:39.87   1st Qu.: -77.18   FALSE:74941     ##  Median :2020   Median :40.34   Median : -75.85   TRUE :48601     ##  Mean   :2020   Mean   :40.20   Mean   : -76.47                   ##  3rd Qu.:2021   3rd Qu.:40.86   3rd Qu.: -74.93                   ##  Max.   :2022   Max.   :45.71   Max.   : -68.00                   ##   DistToIntro       ##  Min.   :   0.414   ##  1st Qu.:  76.988   ##  Median : 115.577   ##  Mean   : 184.277   ##  3rd Qu.: 203.000   ##  Max.   :3883.978 # save this dataset write.csv(grid_data, file.path(here::here(), \"exported-data\", \"grid_data.csv\"), row.names = F)"},{"path":"https://nbelouard.github.io/jumpID/articles/010_Jump_list.html","id":"differentiating-diffusive-spread-and-jump-dispersal-principle","dir":"Articles","previous_headings":"","what":"3. Differentiating diffusive spread and jump dispersal: principle","title":"#1: Isolating dispersal jumps and diffusive spread","text":"set four successive functions run separate cells SLF established due continuous, diffusive spread, cells SLF established due jump dispersal. first run functions tentative set parameters understand analysis works. optimization parameters described later vignette.","code":""},{"path":"https://nbelouard.github.io/jumpID/articles/010_Jump_list.html","id":"a--attribute_sectors","dir":"Articles","previous_headings":"3. Differentiating diffusive spread and jump dispersal: principle","what":"a- attribute_sectors()","title":"#1: Isolating dispersal jumps and diffusive spread","text":"Considering expansion invasion heterogeneous space, jump analyses requires invasion range divided sectors introduction site origin. first function, attribute_sectors() attributes sector number cell dataset, used jump analysis. , divide invasion range 16 sectors. See vignette #2 “Decreasing calculation time” learn changing number sectors may make analysis faster.  jump analysis go sector successively.","code":"grid_data_sectors <- jumpID::attribute_sectors(dataset = grid_data,                                                   # dataset to be explored                              nb_sectors = 16,                               # number of sectors to divide the invasion range                              centroid = c(-75.675340, 40.415240)                              # vector containing the centroid coordinates as long/lat                              ) ## 2024-08-21 11:34:00.307509 Start sector attribution... Sector attribution completed. # Map results #| fig.alt: > #|   A map showing all survey points colored by sector ggplot(data = states) +   geom_point(data = grid_data_sectors,               aes(x = longitude, y = latitude,                   col = as.factor(sectors_nb))) +   geom_sf(data = states, alpha = 0) +   theme(legend.position = \"bottom\") +   xlab(\"Longitude\") + ylab(\"Latitude\") +   coord_sf(xlim = c(-82, -72), ylim = c(38, 43), expand = FALSE) +   labs(col = \"Sector number\")"},{"path":"https://nbelouard.github.io/jumpID/articles/010_Jump_list.html","id":"b--find_thresholds","dir":"Articles","previous_headings":"3. Differentiating diffusive spread and jump dispersal: principle","what":"b- find_thresholds()","title":"#1: Isolating dispersal jumps and diffusive spread","text":"function find_thresholds() search first discontinuity SLF distribution. Points sorted increasing distance introduction point, function goes consecutive pair points, starting introduction point going outwards. stops identifies distance larger defined gap_size two consecutive points, marking discontinuity SLF distribution. last point discontinuity marks putative limit diffusive spread. function runs independently sector. considered populations go extinct, data cumulated time. limit diffusive spread go back towards introduction point time. input dataset output attribute_sectors(). gap_size parameter defines minimal distance two consecutive points marks discontinuity SLF distribution, km. example, set 15 km. option “negatives” set TRUE (default), function check negative surveys discontinuity, absence SLF established due absence surveys area.  map, blue points indicate invasion front identified find_thresholds(), .e., limits diffusive spread every direction, every year. point analysis, points farther thresholds stored potential jumps (green points).","code":"gap_size = 15   Results_thresholds <- jumpID::find_thresholds(dataset = grid_data_sectors,                                                  gap_size = gap_size,                                                  negatives = T) ## 2024-08-21 11:34:15.508346 Start finding thresholds... Sector 1/16...  2/16...  3/16...  4/16...  5/16...  6/16...  7/16...  8/16...  9/16...  10/16...  11/16...  12/16...  13/16...  14/16...  15/16...  16/16 ## Threshold analysis done. 4243 potential jumps were found. # Resulting objects are #- Results_thresholds$preDist, a data frame of threshold cells = extreme points of the  # diffusive spread. Will be completed in find_secDiff() #- Results_thresholds$potJumps, a data frame of potential jumps. Will be # pruned in find_jumps()  # Make a single object for the map thresholds_map <- dplyr::bind_rows(Results_thresholds$preDist %>%                                       dplyr::mutate(Type = \"Diffusion threshold\"),                                    Results_thresholds$potJumps %>%                                       dplyr::mutate(Type = \"Potential jump\"))  # Map results #| fig.alt: > #|   A map showing diffusion thresholds in blue and potential dispersal jumps in green ggplot(data = states) +   geom_point(data = grid_data %>% filter(established == T),               aes(x = longitude, y = latitude), col = \"gray\") +   geom_point(data = thresholds_map, aes(x = longitude, y = latitude, col = Type), size = 1) +   geom_sf(data = states, alpha = 0) +   facet_wrap(~year) +   theme_classic() +   theme(legend.position = \"bottom\") +   scale_color_manual(values = c(\"blue\", \"green\")) +   xlab(\"Longitude\") + ylab(\"Latitude\") + labs(col = \"Identification\") +   coord_sf(xlim = c(-82, -72), ylim = c(38, 43), expand = FALSE)"},{"path":"https://nbelouard.github.io/jumpID/articles/010_Jump_list.html","id":"c--find_jumps","dir":"Articles","previous_headings":"3. Differentiating diffusive spread and jump dispersal: principle","what":"c- find_jumps()","title":"#1: Isolating dispersal jumps and diffusive spread","text":"function find_jumps() prunes list potential jumps cells less  positive cell previous year, species likely spread cell. final list jumps obtained object Jumps.  analysis may stopped dispersal jumps biological interest. complement, secondary diffusion may examined last function, find_secDiff().","code":"Results_jumps <- jumpID::find_jumps(grid_data = grid_data,                         potJumps = Results_thresholds$potJumps,                        gap_size = gap_size) ## 2024-08-21 11:40:21.079927 Start finding jumps... Year 2014 ... Year 2015 ... Year 2016 ... Year 2017 ... Year 2018 ... Year 2019 ... Year 2020 ... Year 2021 ... Year 2022 ... Jump analysis done. 387 jumps were identified. # Resulting objects are: #- Results_jumps$Jumps, a data frame containing all jumps #- Results_jumps$diffusers, a data frame of positive cells stemming from diffusive spread #- Results_jumps$potDiffusion, a data frame of remaining cells, containing a mix of  # secondary diffusion and additional threshold points. Will be pruned in find_secDiff()  # Make a single object for the map jumps_map <- dplyr::bind_rows(Results_jumps$diffusers %>%                                  mutate(Type = \"Diffusion\"),                               Results_jumps$Jumps %>%                                  mutate(Type = \"Jump\"),                               Results_jumps$potDiffusion %>%                                  mutate(Type = \"Potential diffusion\"))  # Map results #| fig.alt: > #|   A map showing dispersal jumps in green, diffusion points in blue, and potential diffusion points in orange ggplot(data = states) +   geom_point(data = grid_data,               aes(x = longitude, y = latitude), col = \"gray\") +   geom_point(data = jumps_map, aes(x = longitude, y = latitude, col = Type)) +   geom_sf(data = states, alpha = 0) +   facet_wrap(~year) +   theme_classic() +   theme(legend.position = \"bottom\") +   scale_color_manual(values = c(\"blue\", \"green\", \"orange\")) +   xlab(\"Longitude\") + ylab(\"Latitude\") + labs(col = \"Identification\") +   coord_sf(xlim = c(-82, -72), ylim = c(38, 43), expand = FALSE)"},{"path":"https://nbelouard.github.io/jumpID/articles/010_Jump_list.html","id":"d--find_secdiff","dir":"Articles","previous_headings":"3. Differentiating diffusive spread and jump dispersal: principle","what":"d- find_secDiff()","title":"#1: Isolating dispersal jumps and diffusive spread","text":"Cells discarded jump list either additional threshold points secondary diffusion previous jump. find_secDiff() attributes correct category checking whether close previous jump, diffusion point.","code":"Results_secDiff <- jumpID::find_secDiff(potDiffusion = Results_jumps$potDiffusion,                                 Jumps = Results_jumps$Jumps,                                 diffusers = Results_jumps$diffusers,                                 Dist = Results_thresholds$preDist,                                 gap_size = gap_size) ## 2024-08-21 11:41:05.552453 Start finding secondary diffusion... Year 2017 ...Year 2018 ...Year 2019 ...Year 2020 ...Year 2021 ...Year 2022 ...Analysis of secondary diffusion done. # Resulting objects are: #- Results_secDiff$secDiff, a data frame of all cells that are secondary diffusion  # from a previous jump #- Results_secDiff$Dist, a data frame of all extreme points on the invasion front (thresholds)  # We extract all diffusion points from the original dataset (points that are neither jumps or secondary diffusion) diffusion <- dplyr::setdiff(grid_data %>% filter(established == T),                      Results_jumps$Jumps %>% select(-DistToSLF)) %>%    dplyr::setdiff(Results_secDiff$secDiff)  # Make a single object for the map secDiff_map <- dplyr::bind_rows(diffusion %>%                                    mutate(Type = \"Diffusion\"),                                 Results_jumps$Jumps %>%                                    mutate(Type = \"Jump\"),                                 Results_secDiff$secDiff %>%                                    mutate(Type = \"Secondary diffusion\"))  # Map results #| fig.alt: > #|   A final map showing diffusion points in blue, jumps in green, and secondary diffusion in orange ggplot(data = states) +   geom_point(data = grid_data %>% filter(established == T),               aes(x = longitude, y = latitude), col = \"gray\") +   geom_point(data = secDiff_map, aes(x = longitude, y = latitude, col = Type)) +   geom_sf(data = states, alpha = 0) +   facet_wrap(~year) +   theme_classic() +   theme(legend.position = \"bottom\") +   scale_color_manual(values = c(\"blue\", \"green\", \"orange\")) +   xlab(\"Longitude\") + ylab(\"Latitude\") + labs(col = \"Identification\") +   coord_sf(xlim = c(-82, -72), ylim = c(38, 43), expand = FALSE)"},{"path":"https://nbelouard.github.io/jumpID/articles/010_Jump_list.html","id":"wrapper-for-jump-analysis","dir":"Articles","previous_headings":"","what":"4. Wrapper for jump analysis","title":"#1: Isolating dispersal jumps and diffusive spread","text":"analyses can done one instance using wrapper function. plot results map.","code":"jumps_wrapper <- jumpID::find_jumps_wrapper(dataset = grid_data,                                                nb_sectors = 16,                                               centroid = c(-75.675340, 40.415240),                                               gap_size = 15,                                               negatives = T) ## 2024-08-21 11:42:27.129555 Start sector attribution... Sector attribution completed.  ## 2024-08-21 11:42:27.151485 Start finding thresholds... Sector 1/16...  2/16...  3/16...  4/16...  5/16...  6/16...  7/16...  8/16...  9/16...  10/16...  11/16...  12/16...  13/16...  14/16...  15/16...  16/16 ## Threshold analysis done. 4243 potential jumps were found.  ## 2024-08-21 11:48:20.778549 Start finding jumps... Year 2014 ... Year 2015 ... Year 2016 ... Year 2017 ... Year 2018 ... Year 2019 ... Year 2020 ... Year 2021 ... Year 2022 ... Jump analysis done. 387 jumps were identified. ## 2024-08-21 11:48:46.386323 Start finding secondary diffusion... Year 2017 ...Year 2018 ...Year 2019 ...Year 2020 ...Year 2021 ...Year 2022 ...Analysis of secondary diffusion done. # save resulting objects  write.csv(jumps_wrapper$Dist,            file.path(here::here(), \"exported-data\", \"thresholds.csv\"), row.names = F) write.csv(jumps_wrapper$diffusion,            file.path(here::here(), \"exported-data\", \"diffusion.csv\"), row.names = F) write.csv(jumps_wrapper$Jumps,            file.path(here::here(), \"exported-data\", \"jumps.csv\"), row.names = F) write.csv(jumps_wrapper$secDiff,            file.path(here::here(), \"exported-data\", \"secDiffusion.csv\"), row.names = F) # Make a single object for the map jumps_wrapper_map <- dplyr::bind_rows(jumps_wrapper$diffusion %>%                                          dplyr::mutate(Type = \"Diffusion\"),                                       jumps_wrapper$Jumps %>%                                          dplyr::mutate(Type = \"Jump\"),                                       jumps_wrapper$secDiff %>%                                          dplyr::mutate(Type = \"Secondary diffusion\"))  # Map results #| fig.alt: > #|   A map showing diffusion points in blue, jumps in green, and secondary diffusion in orange ggplot(data = states) +   geom_point(data = grid_data %>% filter(established == F),               aes(x = longitude, y = latitude), col = \"gray90\") +   geom_point(data = grid_data %>% filter(established == T),               aes(x = longitude, y = latitude), col = \"gray30\") +   geom_point(data = jumps_wrapper_map, aes(x = longitude, y = latitude, col = Type)) +   geom_sf(data = states, alpha = 0) +   facet_wrap(~year) +   theme_classic() +   theme(legend.position = \"bottom\") +   scale_color_manual(values = c(\"blue\", \"orange\", \"green\")) +   xlab(\"Longitude\") + ylab(\"Latitude\") + labs(col = \"Identification\") +   coord_sf(xlim = c(-82, -72), ylim = c(38, 43), expand = FALSE)"},{"path":"https://nbelouard.github.io/jumpID/articles/010_Jump_list.html","id":"rarefy-jump-clusters","dir":"Articles","previous_headings":"","what":"5. Rarefy jump clusters","title":"#1: Isolating dispersal jumps and diffusive spread","text":"jumps clustered area. Jump clusters may stem independent dispersal jumps, .e. SLF hitchhiked multiple times locations year. Alternatively, jump clusters may result SLF quickly spreading around single dispersal jump. Finally, can mix two hypotheses. identify jump clusters better understand jump locations. First, delineate jump clusters jumps located less gap size . Check many points per jump cluster.","code":"Jumps <- read.csv(file.path(here::here(), \"exported-data\", \"jumps.csv\"))"},{"path":"https://nbelouard.github.io/jumpID/articles/010_Jump_list.html","id":"a--group_jumps","dir":"Articles","previous_headings":"5. Rarefy jump clusters","what":"a- group_jumps()","title":"#1: Isolating dispersal jumps and diffusive spread","text":"","code":"Jump_groups <- jumpID::group_jumps(Jumps, gap_size = 15)  Groups <- Jump_groups %>%    dplyr::group_by(year, Group) %>%    dplyr::summarise(Nb = n()) %>%    dplyr::arrange(-Nb) %>%    dplyr::filter(Nb > 1) ## `summarise()` has grouped output by 'year'. You can override using the ## `.groups` argument. #| fig.alt: > #|   A barplot showing the number of jump clusters identified per year ggplot(Groups, aes(x = as.factor(year), y = Nb)) +   geom_boxplot() + theme_classic() +   ylab(\"Number of jumps per cluster\") + xlab(\"Year\")"},{"path":"https://nbelouard.github.io/jumpID/articles/010_Jump_list.html","id":"b--rarefy_groups","dir":"Articles","previous_headings":"5. Rarefy jump clusters","what":"b- rarefy_groups()","title":"#1: Isolating dispersal jumps and diffusive spread","text":"summarize jump cluster summarizing central point.  387 jumps rarefied 152 jump clusters.","code":"Jump_clusters <- jumpID::rarefy_groups(Jump_groups) %>%   dplyr::mutate(Rarefied = TRUE)  write.csv(Jump_clusters,            file.path(here::here(), \"exported-data\", \"jump_clusters.csv\"),            row.names = F)   # Map these groups and the rarefied points #| fig.alt: > #|   A map showing all jumps colored by year and the rarefied jumps ggplot(data = states) +   geom_sf(data = states, fill = \"white\") +   coord_sf(xlim = c(-82, -72), ylim = c(38, 43), expand = FALSE) +   geom_point(data = Jump_groups,              aes(x = longitude, y = latitude,                   col = as.factor(Group)), shape = 19, size = 3,               show.legend = F) +   geom_point(data = Jump_clusters,               aes(x = longitude, y = latitude)) +   labs(x = \"Longitude\", y = \"Latitude\")"},{"path":"https://nbelouard.github.io/jumpID/articles/010_Jump_list.html","id":"data-is-ready-for-biological-analysis-and-interpretation","dir":"Articles","previous_headings":"","what":"6. Data is ready for biological analysis and interpretation!","title":"#1: Isolating dispersal jumps and diffusive spread","text":"– end vignette –","code":""},{"path":"https://nbelouard.github.io/jumpID/articles/011_Figures_jump_list.html","id":"aim-and-setup","dir":"Articles","previous_headings":"","what":"Aim and setup","title":"#1B Creating the figures associated with the jump analysis","text":"vignette computes figures included manuscript associated jumpID package. vignette requires loading data frames generated first vignette package. Load files generated previous vignette Prepare states background map","code":"library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(magrittr) library(ggplot2) library(cowplot) library(jumpID) slf <- read.csv(file.path(here::here(), \"data\", \"lyde_data_v2\", \"lyde.csv\"), h=T) grid_data <- read.csv(file.path(here::here(), \"exported-data\", \"grid_data.csv\"), h=T) centroid <- data.frame(longitude_rounded = -75.675340, latitude_rounded = 40.415240)  Jumps <- read.csv(file.path(here::here(), \"exported-data\", \"jumps.csv\")) Jump_clusters <- read.csv(file.path(here::here(), \"exported-data\", \"jump_clusters.csv\")) Thresholds <- read.csv(file.path(here::here(), \"exported-data\", \"thresholds.csv\")) diffusion <- read.csv(file.path(here::here(), \"exported-data\", \"diffusion.csv\")) secDiffusion <- read.csv(here::here(\"exported-data\", \"secdiffusion.csv\")) # get a simple feature objects for states  states <- sf::st_as_sf(maps::map(\"state\", plot = FALSE, fill = TRUE)) %>%   sf::st_transform(crs = 4326)"},{"path":[]},{"path":"https://nbelouard.github.io/jumpID/articles/011_Figures_jump_list.html","id":"a-jump-map","dir":"Articles","previous_headings":"Figure 2: Faceted jump map, barplot & distance","what":"2A: jump map","title":"#1B Creating the figures associated with the jump analysis","text":"Map position jumps identify jump clusters per year","code":"map_rarefied <- ggplot(data = states) +   geom_sf(data = states, fill = \"white\") +   # positive points   geom_point(data = grid_data %>% filter(established == TRUE),               aes(x = longitude, y = latitude), col = \"lightgrey\") +   # introduction point   annotate(\"point\", x = -75.675340, y = 40.415240,             col = \"black\", shape = 4, size = 3) +   # all jumps   geom_point(data = Jumps,              aes(x = longitude, y = latitude, col = as.factor(year),               shape = \"All jumps\"), size = 3) +   # jump clusters   geom_point(data = Jump_clusters,               aes(x = longitude, y = latitude, shape = \"Rarefied jumps\"),               col = \"black\", fill = \"white\", size = 1) +      scale_color_manual(name = \"Year\",                      values = c(\"#d53e4f\", \"#fc8d59\", \"#f4c957\", \"#94e65f\", \"#59a68e\", \"#27679e\"),                      labels = c(\"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\")) +   scale_shape_manual(name = \"Jumps\",                       values = c(\"All jumps\" = 19, \"Rarefied jumps\" = 21)) +   coord_sf(xlim = c(-86, -70), ylim = c(36, 44), expand = FALSE) +   labs(x = \"Longitude\", y = \"Latitude\") +   theme(panel.background = element_rect(fill = \"white\"))  #| fig.alt: > #|   Map with dispersal jumps colored by year, and rarefied jumps map_rarefied"},{"path":"https://nbelouard.github.io/jumpID/articles/011_Figures_jump_list.html","id":"b-number-of-jumps-per-year-bar-plot","dir":"Articles","previous_headings":"Figure 2: Faceted jump map, barplot & distance","what":"2B: number of jumps per year bar plot","title":"#1B Creating the figures associated with the jump analysis","text":"Count many jumps per year","code":"# add the type of data to each dataset Jump_clusters %<>% mutate(Type = \"Rarefied jumps\") Jumps %<>% mutate(Type = \"All jumps\")  # count the number of clusters per year Clusters_year <- Jump_clusters %>%    group_by(year, Type) %>%    summarise(n = n()) ## `summarise()` has grouped output by 'year'. You can override using the ## `.groups` argument. # count the total number of jumps per year Jumps_year <- Jumps %>%    group_by(year, Type) %>%    summarise(n = n()) %>%    left_join(Clusters_year, by = \"year\") %>%    mutate(n = n.x - n.y) %>%    rename(Type = Type.x) ## `summarise()` has grouped output by 'year'. You can override using the ## `.groups` argument. # bind the two tables Jumps_total <- bind_rows(Clusters_year, Jumps_year %>% select(year, Type, n))   jumps_plot <- ggplot() +   geom_bar(data = Jumps_total,             aes(x = year, y = n, fill = as.factor(year), col = as.factor(year),                 group = Type, alpha = Type),             stat = \"identity\", lwd = .25, show.legend = F) +   scale_fill_manual(values = c(\"#d53e4f\", \"#fc8d59\", \"#f4c957\", \"#94e65f\", \"#59a68e\", \"#27679e\")) +   scale_color_manual(values = c(\"#d53e4f\", \"#fc8d59\", \"#f4c957\", \"#94e65f\", \"#59a68e\", \"#27679e\")) +   scale_alpha_manual(values = c(1, 0)) +   xlab(\"Year\") + ylab(\"Number of jumps\") +   theme_classic() +   scale_x_continuous(breaks = seq(2017, 2022, by = 1)) +   theme(text = element_text(size = 10))  #| fig.alt: > #|   Barplot with the number of jump clusters and jumps, colored by year jumps_plot"},{"path":"https://nbelouard.github.io/jumpID/articles/011_Figures_jump_list.html","id":"c-distance-of-jumps-box-plot","dir":"Articles","previous_headings":"Figure 2: Faceted jump map, barplot & distance","what":"2C: distance of jumps box plot","title":"#1B Creating the figures associated with the jump analysis","text":"calculate distance invasion front jumps every year","code":"# 1. select all diffusion points for the rarefied jump dataset diffusion_rarefied <- setdiff(grid_data %>% filter(established == T),                          Jump_clusters %>% select(year, latitude, longitude, established, DistToIntro)) %>% # remove jump clusters from grid data   setdiff(secDiffusion) # remove secondary diffusion too  #2. calculate jump distance for each jump for (jump in 1:length(Jump_clusters$DistToIntro)){ #for each jump   y = Jump_clusters[jump,] %>% pull(year)   diffusion_y <- diffusion %>% filter(year == y)   pairwise_dist <- geosphere::distGeo(diffusion_y[,c('longitude','latitude')], Jump_clusters[jump,c('longitude','latitude')])/1000   Jump_clusters$DistToFront[jump] = min(pairwise_dist)  }    MeanDist_jump <- ggplot() +   geom_boxplot(data = Jump_clusters, show.legend = F,                aes(x = year,                  y = DistToFront,                     col = as.factor(year)                  ),                alpha = 0, outlier.alpha = 0.7) +      scale_color_manual(name = \"Year\", values = c(\"#d53e4f\", \"#fc8d59\", \"#f4c957\", \"#94e65f\", \"#59a68e\", \"#27679e\")) +   scale_x_continuous(breaks = seq(2017, 2022, by = 1)) +   labs(x = \"Year\",     y = \"Distance from core invasion (km)\") +   theme_classic()   #| fig.alt: > #|   Boxplot with the distance of jump clusters from the invasion front colored by year MeanDist_jump"},{"path":"https://nbelouard.github.io/jumpID/articles/011_Figures_jump_list.html","id":"d-evolution-of-jump-distances","dir":"Articles","previous_headings":"Figure 2: Faceted jump map, barplot & distance","what":"2D Evolution of jump distances","title":"#1B Creating the figures associated with the jump analysis","text":"Linear model statistical test","code":"Distrib_jumpDist <- ggplot(Jump_clusters, aes(x = DistToFront)) +   geom_histogram(aes(fill = as.factor(-year)), binwidth = 10, show.legend = F) +   scale_fill_manual(name = \"Year\", values = c(\"#27679e\", \"#59a68e\", \"#94e65f\", \"#f4c957\", \"#fc8d59\", \"#d53e4f\")) +   theme_classic() +   labs(x = \"Distance from core invasion (km)\",        y = \"Count of jump locations\")  #| fig.alt: > #|   Histogram of the jump distances colored by year Distrib_jumpDist # generate model model <- lm(log(DistToFront) ~ year, data = Jump_clusters) # look at residuals shapiro.test(model$residuals) ##  ##  Shapiro-Wilk normality test ##  ## data:  model$residuals ## W = 0.96383, p-value = 0.0005085 # look at results summary(model) ##  ## Call: ## lm(formula = log(DistToFront) ~ year, data = Jump_clusters) ##  ## Residuals: ##      Min       1Q   Median       3Q      Max  ## -1.41134 -0.74153 -0.09242  0.61409  1.92588  ##  ## Coefficients: ##              Estimate Std. Error t value Pr(>|t|) ## (Intercept) -38.04036  115.38662  -0.330    0.742 ## year          0.02087    0.05711   0.365    0.715 ##  ## Residual standard error: 0.8217 on 150 degrees of freedom ## Multiple R-squared:  0.0008896,  Adjusted R-squared:  -0.005771  ## F-statistic: 0.1336 on 1 and 150 DF,  p-value: 0.7153"},{"path":"https://nbelouard.github.io/jumpID/articles/011_Figures_jump_list.html","id":"assemble-figure-2abcd","dir":"Articles","previous_headings":"Figure 2: Faceted jump map, barplot & distance","what":"Assemble figure 2ABCD","title":"#1B Creating the figures associated with the jump analysis","text":"","code":"fig2 <- ggdraw() +   draw_plot(map_rarefied, x = 0, y = .33, width = 1, height = .66) +   draw_plot(jumps_plot, 0, 0, .33, .33) +   draw_plot(MeanDist_jump, .33, 0, .33, .33) +   draw_plot(Distrib_jumpDist, .66, 0, .33, .33) +   draw_plot_label(c(\"(a)\", \"(b)\", \"(c)\", \"(d)\"), c(0, 0, 0.33, 0.66), c(1, 0.36, 0.36, 0.36), size = 15) +   theme(plot.background = element_rect(fill=\"#FFFFFF\", color = NA))  #| fig.alt: > #|   Figure assembling the previous figures A, B, C, D. fig2 ggsave(file.path(here::here(), \"figures\", \"2. jump_description.jpg\"),         fig2, height = 10, width = 10)"},{"path":[]},{"path":"https://nbelouard.github.io/jumpID/articles/011_Figures_jump_list.html","id":"a-map","dir":"Articles","previous_headings":"Figure 3: secondary diffusion","what":"3A: Map","title":"#1B Creating the figures associated with the jump analysis","text":"Map points identified secondary diffusion around dispersal jumps.","code":"secDiff_map <- ggplot() +   geom_point(data = grid_data %>% filter(established == TRUE),               aes(x = longitude, y = latitude),               col = \"lightgrey\") +   geom_point(data = secDiffusion %>% arrange(desc(year)),                aes(x = longitude, y = latitude,                  col = as.factor(year)),               stroke = 2, size = 4) +   geom_point(data = Jump_clusters %>% arrange(desc(year)),                aes(x = longitude, y = latitude, col = as.factor(year), fill = as.factor(year)),              color = \"black\",               shape = 21,               stroke = 0.5, size = 3.5) +   scale_color_manual(values = c( \"#f4c957\", \"#94e65f\", \"#59a68e\", \"#27679e\")) +   scale_fill_manual(values = c( \"#d53e4f\", \"#fc8d59\", \"#f4c957\", \"#94e65f\", \"#59a68e\", \"#27679e\")) +   labs(x = \"Longitude\", y = \"Latitude\") +   theme(legend.position = \"right\", text = element_text(size = 10),         panel.background = element_rect(fill = \"white\"),         legend.key = element_rect(fill = \"white\"),         legend.title = element_text(size = 20),         legend.text = element_text(size = 16),         legend.key.size = unit(2, \"lines\"),         axis.title = element_text(size = 18),         axis.text = element_text(size = 12)) +     geom_sf(data = states, alpha = 0) +     coord_sf(xlim = c(-85.25, -71), ylim = c(36.5, 43)) +   guides(colour = guide_legend(paste0(\"Secondary\", \"\\n\", \"Diffusion\")),           fill = guide_legend(\"Rarefied jumps\"))  #| fig.alt: > #|   Map showing the location of secondary diffusion around dispersal jumps, colored by year secDiff_map"},{"path":"https://nbelouard.github.io/jumpID/articles/011_Figures_jump_list.html","id":"b-secondary-diffusion-bar-plot","dir":"Articles","previous_headings":"Figure 3: secondary diffusion","what":"3B: Secondary diffusion Bar Plot","title":"#1B Creating the figures associated with the jump analysis","text":"Count many jumps followed secondary diffusion","code":"# select jumps for which we have data for year n+1 Jumps_2021 <- Jumps %>% filter(year %in% c(2014:2021)) %>%    mutate(secDiff = NA)  # determine if they are followed by secondary diffusion, or enveloped by diffusion for (jump in 1:length(Jumps_2021$DistToIntro)){ # for each jump   # is this jump within 1 km of any diffusion point the year after? ie. enveloped by diffusion   testDiff <- diffusion %>% filter(year == Jumps_2021$year[jump]+1)   pairwise_dist <- geosphere::distGeo(testDiff[,c('longitude','latitude')], Jumps_2021[jump,c('longitude','latitude')])/1000      if (min(pairwise_dist) < 1){ Jumps_2021$secDiff[jump] = \"enveloped\"    } else {   # is there secondary diffusion within 15 km of this jump the year after?   # calculate pairwise distance with secDiff the year after     testSecDiff <- secDiffusion %>% filter(year == Jumps_2021$year[jump]+1)     if (dim(testSecDiff)[1] > 0){       pairwise_dist <- geosphere::distGeo(testSecDiff[,c('longitude','latitude')], Jumps_2021[jump,c('longitude','latitude')])/1000       Jumps_2021$secDiff[jump] = ifelse(min(pairwise_dist) < 15, \"yes\", \"no\")     } else { Jumps_2021$secDiff[jump] = \"no\" } # if there is no secDiff   } }  # count the number of jumps in each category (yes, no, enveloped) Jumps_secDiff <- Jumps_2021 %>%   group_by(year, secDiff) %>%   summarise(count = n()) %>%   ungroup() ## `summarise()` has grouped output by 'year'. You can override using the ## `.groups` argument. # order this factor Jumps_secDiff$secDiff <- factor(Jumps_secDiff$secDiff,                                  levels = c(\"enveloped\", \"no\", \"yes\"))  #Bar Plot Jumps_secDiff_plot <- ggplot() +   geom_bar(data = Jumps_secDiff,            aes(x = as.factor(year),                y = count,                group = secDiff,                fill = as.factor(year),                col = as.factor(year),                 alpha = secDiff),            lwd = .25,            stat = \"identity\") +   scale_fill_manual(values = c(\"#d53e4f\", \"#fc8d59\", \"#f4c957\", \"#94e65f\",                                 \"#59a68e\", \"#27679e\"), guide = \"none\") +   scale_color_manual(values = c(\"#d53e4f\", \"#fc8d59\", \"#f4c957\", \"#94e65f\",                                  \"#59a68e\", \"#27679e\"), guide = \"none\") +   scale_alpha_manual(values = c(0.3, 0, 1)) +   theme_classic() +   xlab(\"Year of Jump\") +   ylab(\"Number of Jumps\") +   guides(alpha = guide_legend(     paste0(\"Sec. diffusion after jump\"),     override.aes = list(fill = \"black\", color = \"black\", linetype = 1, shape = 21))) +   theme(legend.title = element_text(size = 20),         legend.text = element_text(size = 16),         legend.key.size = unit(2, \"lines\"),         axis.title = element_text(size = 18),         axis.text = element_text(size = 12))  #| fig.alt: > #|   Barplot with the number of jumps followed by secondary diffusion or enveloped, colored by year Jumps_secDiff_plot"},{"path":"https://nbelouard.github.io/jumpID/articles/011_Figures_jump_list.html","id":"assemble-figure-3ab","dir":"Articles","previous_headings":"Figure 3: secondary diffusion","what":"Assemble figure 3AB","title":"#1B Creating the figures associated with the jump analysis","text":"","code":"secDiff_graphs_combined <- cowplot::ggdraw() +   cowplot::draw_plot(secDiff_map, 0, .33, 1, 0.66) +   cowplot::draw_plot(Jumps_secDiff_plot, 0, 0, 1, 0.33) +   cowplot::draw_plot_label(c(\"(a)\", \"(b)\"), c(0.06, 0.06), c(0.90, 0.33), size = 25)   #| fig.alt: > #|   Figure combining previous figures A and B secDiff_graphs_combined ggsave(file.path(here::here(), \"figures\", \"3. secDiff_combined.jpeg\"),        secDiff_graphs_combined, height = 13, width = 13)"},{"path":"https://nbelouard.github.io/jumpID/articles/011_Figures_jump_list.html","id":"figure-4-invasion-radius","dir":"Articles","previous_headings":"","what":"Figure 4: Invasion radius","title":"#1B Creating the figures associated with the jump analysis","text":"estimate spread SLF, extract year radius invasion sector. can look radius invasion increases time, differentiating diffusive spread jump dispersal.  Test difference invasion radius spread types  Calculate yearly increase invasion radius","code":"sectors_used = 16  # calculate max radius for diffusion only thresholdMaxSector <- data.frame(NULL)  # take the threshold data (most extreme diffusion points) for (y in unique(Thresholds$year)){ # for each year,   # distribute data in sectors   thresholdSectors <- jumpID::attribute_sectors(Thresholds %>%                                                    select(year, latitude, longitude, DistToIntro) %>%                                                    filter(year %in% c(2014:y)),                                                  nb_sectors = sectors_used,                                                  centroid = c(-75.67534, 40.41524))    # for each sector, take the maximum radius   thresholdMaxSectorYear <- thresholdSectors %>%      group_by(sectors_nb) %>%     summarise(maxDistToIntro = max(DistToIntro)) %>%      mutate(year = y)      # add it to the table   thresholdMaxSector <- rbind(thresholdMaxSector, thresholdMaxSectorYear) } ## 2024-08-21 11:51:39.89624 Start sector attribution... Sector attribution completed.  ## 2024-08-21 11:51:39.911515 Start sector attribution... Sector attribution completed.  ## 2024-08-21 11:51:39.926109 Start sector attribution... Sector attribution completed.  ## 2024-08-21 11:51:39.940756 Start sector attribution... Sector attribution completed.  ## 2024-08-21 11:51:39.955412 Start sector attribution... Sector attribution completed.  ## 2024-08-21 11:51:39.969986 Start sector attribution... Sector attribution completed.  ## 2024-08-21 11:51:39.984774 Start sector attribution... Sector attribution completed.  ## 2024-08-21 11:51:40.00031 Start sector attribution... Sector attribution completed.  ## 2024-08-21 11:51:40.015613 Start sector attribution... Sector attribution completed. # do the same thing for jumps # calculate max radius for jumps jumpMaxSector = data.frame(NULL)  for (y in unique(Jumps$year)){   jumpSectors <- jumpID::attribute_sectors(Jumps %>%                                               select(year, latitude, longitude, DistToIntro) %>%                                               filter(year %in% c(2014:y)),                                             nb_sectors = sectors_used,                                             centroid = c(-75.67534, 40.41524))    jumpsMaxSectorYear <- jumpSectors %>%      group_by(sectors_nb) %>%     summarise(maxDistToIntro = max(DistToIntro)) %>%      mutate(year = y)      jumpMaxSector <- rbind(jumpMaxSector, jumpsMaxSectorYear) } ## 2024-08-21 11:51:40.047125 Start sector attribution... Sector attribution completed.  ## 2024-08-21 11:51:40.06168 Start sector attribution... Sector attribution completed.  ## 2024-08-21 11:51:40.07621 Start sector attribution... Sector attribution completed.  ## 2024-08-21 11:51:40.090972 Start sector attribution... Sector attribution completed.  ## 2024-08-21 11:51:40.105787 Start sector attribution... Sector attribution completed.  ## 2024-08-21 11:51:40.120721 Start sector attribution... Sector attribution completed. # we combine thresholds and jumps to get the \"all spread\" dataset allMaxSector <- bind_rows(thresholdMaxSector, jumpMaxSector) %>%    group_by(year, sectors_nb) %>%    summarise(maxDistToIntro = max(maxDistToIntro)) ## `summarise()` has grouped output by 'year'. You can override using the ## `.groups` argument. # combine all spread and invasion front data radiusData <- bind_rows(allMaxSector %>%                            mutate(Type = \"All spread\"),                         thresholdMaxSector %>% mutate(Type = \"Invasion front\"))  # plot results invasionRadius <- ggplot(data = radiusData,                           aes(x = as.factor(year), y = maxDistToIntro,                               fill = Type)) +   geom_boxplot() +   scale_fill_manual(name = \"Type\", values = c(\"All spread\" = \"white\",                                                \"Invasion front\" = \"gray60\")) +   theme_classic() +   labs(x = \"Year\", y = \"refDist\") +   theme(legend.title = element_text(size = 20),       legend.text = element_text(size = 16),       legend.key.size = unit(2, \"lines\"),       axis.title = element_text(size = 18),       axis.text = element_text(size = 12))  #| fig.alt: > #|   Boxplot showing the yearly invasion radius when considering diffusion only or all spread invasionRadius ggsave(file.path(here::here(), \"figures\", \"4. invasionRadius.jpeg\"),         invasionRadius, height = 6, width = 10) # generate model model <- lm(log(maxDistToIntro) ~ year*Type, data = radiusData) # look at residuals hist(model$residuals, breaks = 30) # look at results anova(model) ## Analysis of Variance Table ##  ## Response: log(maxDistToIntro) ##            Df Sum Sq Mean Sq   F value    Pr(>F)     ## year        1 552.44  552.44 1510.4347 < 2.2e-16 *** ## Type        1   2.92    2.92    7.9834  0.005058 **  ## year:Type   1   1.89    1.89    5.1753  0.023661 *   ## Residuals 282 103.14    0.37                         ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 # calculate the mean radius per year meanRadius <- radiusData %>% group_by(Type, year) %>%    summarise(mean = mean(maxDistToIntro)) %>%    ungroup() ## `summarise()` has grouped output by 'Type'. You can override using the ## `.groups` argument. # All spread: meanRadius %>% filter(Type == \"All spread\") %>%    mutate(radiusIncrease = c(NA, diff(mean))) %>%    summarise(mean = mean(radiusIncrease, na.rm = T),             sd = sd(radiusIncrease, na.rm = T)) ## # A tibble: 1 × 2 ##    mean    sd ##   <dbl> <dbl> ## 1  41.3  23.6 # Invasion front: meanRadius %>% filter(Type == \"Invasion front\") %>%    mutate(radiusIncrease = c(NA, diff(mean))) %>%    summarise(mean = mean(radiusIncrease, na.rm=T),             sd = sd(radiusIncrease, na.rm = T)) ## # A tibble: 1 × 2 ##    mean    sd ##   <dbl> <dbl> ## 1  25.1  11.4"},{"path":[]},{"path":"https://nbelouard.github.io/jumpID/articles/011_Figures_jump_list.html","id":"figure-s1-map-all-points","dir":"Articles","previous_headings":"Supplementary figures","what":"Figure S1: Map all points","title":"#1B Creating the figures associated with the jump analysis","text":"Facet : Overview SLF surveys  Facet B: Zoomed map established SLF","code":"# plot US map mapUS <- ggplot(data = states) +   geom_point(data = grid_data %>% filter(established == FALSE),              aes(x = longitude, y = latitude), col = \"gray\", size = 1) +   geom_point(data = grid_data %>% filter(established == TRUE),              aes(x = longitude, y = latitude), col = \"black\", size = 1) +   geom_sf(alpha = 0) +   labs(x = \"Longitude\", y = \"Latitude\") +   theme_classic() +   theme(legend.position = \"bottom\", legend.key = element_rect(fill = \"white\", colour = NA))   #| fig.alt: > #|   Map showing all SLF surveys done in the US mapUS # save it ggsave(file.path(here::here(), \"figures\", \"S1A. points_all.jpg\"),         mapUS, width = 6, height = 6) # create a variable for a meaningful legend grid_data %<>% mutate(SLF = ifelse(established == T, \"Present\", \"Absent\"))  # plot zoomed map zoomedMap <- ggplot(data = states) +   geom_point(data = grid_data %>% filter(established == FALSE),              aes(x = longitude, y = latitude), col = \"gray\", size = 1) +   geom_point(data = grid_data %>% filter(established == TRUE),              aes(x = longitude, y = latitude), col = \"black\", size = 1) +   geom_sf(alpha = 0) +   labs(x = \"Longitude\", y = \"Latitude\") +   coord_sf(xlim = c(-86, -70), ylim = c(36, 44)) +   theme_classic() +   theme(legend.position=\"bottom\", legend.key = element_rect(fill = \"white\", colour = NA))   #| fig.alt: > #|   Map zoomed-in on the eastern US to show positive and negative SLF surveys zoomedMap # save it ggsave(file.path(here::here(), \"figures\", \"S1B. zoomed_points.jpg\"),         zoomedMap, width = 6, height = 6)"},{"path":"https://nbelouard.github.io/jumpID/articles/011_Figures_jump_list.html","id":"figure-s2-visualizing-jumps-thresholds-and-secdiff","dir":"Articles","previous_headings":"Supplementary figures","what":"Figure S2: Visualizing Jumps, Thresholds, and SecDiff","title":"#1B Creating the figures associated with the jump analysis","text":"Visualize results, faceted year","code":"# Make a single object for the map jumps_wrapper_map <- dplyr::bind_rows(grid_data %>% filter(established == F) %>%                                         dplyr::mutate(Type = \"SLF not established\"),                                       diffusion %>%                                         dplyr::mutate(Type = \"Diffusion\"),                        Jumps %>% dplyr::mutate(Type = \"Jump\"),                        secDiffusion %>% dplyr::mutate(Type = \"Secondary diffusion\"))  facetedResults <- ggplot(data = states) +   geom_point(data = jumps_wrapper_map, aes(x = longitude, y = latitude, col = Type)) +   geom_sf(data = states, alpha = 0) +   facet_wrap(~year) +   theme(legend.position = \"bottom\") +   theme_classic() +   scale_color_manual(values = c(\"blue\", \"green\", \"orange\", \"gray90\")) +   xlab(\"Longitude\") + ylab(\"Latitude\") + labs(col = \"Identification\") +   coord_sf(xlim = c(-82, -72), ylim = c(38, 43), expand = FALSE) +   theme(legend.position = \"right\", text = element_text(size = 10),       panel.background = element_rect(fill = \"white\"),       legend.key = element_rect(fill = \"white\"),       legend.title = element_text(size = 20),       legend.text = element_text(size = 16),       legend.key.size = unit(2, \"lines\"),       axis.title = element_text(size = 18),       axis.text = element_text(size = 12))  #| fig.alt: > #|   Output of the jumpID workflow: maps of diffusion, jumps and secondary diffusion identified per year, faceted per year facetedResults ggsave(file.path(here::here(), \"figures\", \"S2. faceted_results.jpeg\"),         facetedResults, height = 12, width = 20)"},{"path":"https://nbelouard.github.io/jumpID/articles/011_Figures_jump_list.html","id":"figure-s3-sampling-effort","dir":"Articles","previous_headings":"Supplementary figures","what":"Figure S3: Sampling effort","title":"#1B Creating the figures associated with the jump analysis","text":"Show evolution sampling effort jump occurrences time  – end vignette –","code":"slf %<>% filter(!is.na(lyde_established))  surveys <- as.data.frame(table(slf$bio_year)) %>%    mutate(Type = \"Surveys\") %>%    rename(year = Var1, n = Freq)  points <- as.data.frame(table(grid_data$year)) %>%    mutate(Type = \"Points\") %>%    rename(year = Var1, n = Freq)  positives <- grid_data %>% filter(established == T) positive_points <- as.data.frame(table(positives$year)) %>%    mutate(Type = \"Positive points\") %>%    rename(year = Var1, n = Freq)  jumps <- Jumps %>%    count(year) %>%    mutate(Type = \"Dispersal jumps\")  clusters <- Jump_clusters %>%    count(year) %>%    mutate(Type = \"Jump clusters\")  effort <- rbind(surveys, points, positive_points, jumps, clusters) effort$Type <- factor(effort$Type,                        levels = c(\"Surveys\", \"Points\", \"Positive points\",                                   \"Dispersal jumps\", \"Jump clusters\"))  effort_plot <- ggplot() +   geom_point(data = effort, aes(x = year, y = n, shape = Type),               size = 3) +   theme_classic() +   scale_y_log10() +    xlab(\"Year\") + ylab(\"Number of surveys\") +   guides(shape = guide_legend(\"Survey type\"))    #| fig.alt: > #|   Plot showing the evolution of the number of SLF surveys per year effort_plot ggsave(file.path(here::here(), \"figures\", \"S3. number of surveys.jpg\"),         effort_plot, width = 7, height = 5)"},{"path":"https://nbelouard.github.io/jumpID/articles/020_Decreasing_calculation_time.html","id":"aim-and-setup","dir":"Articles","previous_headings":"","what":"Aim and setup","title":"#2: Decreasing calculation time","text":"case extremely large species occurrence datasets, may take long time run analyses. number sectors provide accurate results. However, computational time may decreased increasing number sectors considered. higher number sectors, larger invasion radius points compared pairs find_thresholds, fewer distances need calculated. However, lower number sectors, better pre-identification spatial discontinuities pruned list potential jumps, faster find_jumps. lowest computational time therefore obtained trade-dataset size, invasion radius, number sectors. demonstrate effect number sectors computational time SLF dataset. Load grid data created first vignette","code":"library(magrittr)   library(dplyr) ##  ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union library(jumpID) grid_data <- read.csv(file.path(here::here(), \"exported-data\", \"grid_data.csv\"))"},{"path":"https://nbelouard.github.io/jumpID/articles/020_Decreasing_calculation_time.html","id":"compare-calculation-times","dir":"Articles","previous_headings":"","what":"Compare calculation times","title":"#2: Decreasing calculation time","text":"Run jumpID functions successively 16, 40, 80 sectors compare computation times. dataset, computational times decreased dividing space 40 sectors instead 16. Data dense enough dividing space 80 sectors, indicated multiple warning messages find_threshold. – end vignette –","code":"sectors = c(16,40,80)  optim <- data.frame(s = NULL,                         Time_sectors = NULL,                        Time_thresholds = NULL,                        potJumps = NULL,                         Time_jumps = NULL,                        Jumps = NULL,                         Time_secDiff = NULL)  for (s in sectors){   print(paste0(\"Sectors: \", s))      #1 Attribute sectors   start.time <- Sys.time()   grid_data_sectors <- jumpID::attribute_sectors(dataset = grid_data,                                                     nb_sectors = s,                                                     centroid = c(-75.675340, 40.415240))            #2 Find thresholds   Results_thresholds <- jumpID::find_thresholds(dataset = grid_data_sectors,                                                    gap_size = 15,                                                    negatives = T)   preDist <- Results_thresholds$preDist    potJumps <- Results_thresholds$potJumps             #3 Find jumps   Results_jumps <- jumpID::find_jumps(grid_data = grid_data,                                          potJumps = potJumps,                                         gap_size = 15)   Jumps <- Results_jumps$Jumps    diffusers <- Results_jumps$diffusers    potDiffusion <- Results_jumps$potDiffusion           #4 Find sec diff   Results_secDiff <- jumpID::find_secDiff(potDiffusion = potDiffusion,                                             Jumps = Jumps,                                             diffusers = diffusers,                                             Dist = preDist,                                             gap_size = 15)   end.time <- Sys.time()   time.taken  <- end.time - start.time            result <- data.frame(s = s,                         potJumps = dim(potJumps)[1],                         Jumps = dim(Jumps)[1],                         Total_time = time.taken)   optim <- rbind(optim, result) } ## [1] \"Sectors: 16\" ## 2024-08-21 11:52:56.429104 Start sector attribution... Sector attribution completed.  ## 2024-08-21 11:52:56.47219 Start finding thresholds... Sector 1/16...  2/16...  3/16...  4/16...  5/16...  6/16...  7/16...  8/16...  9/16...  10/16...  11/16...  12/16...  13/16...  14/16...  15/16...  16/16 ## Threshold analysis done. 4243 potential jumps were found.  ## 2024-08-21 11:59:17.334594 Start finding jumps... Year 2014 ... Year 2015 ... Year 2016 ... Year 2017 ... Year 2018 ... Year 2019 ... Year 2020 ... Year 2021 ... Year 2022 ... Jump analysis done. 387 jumps were identified. ## 2024-08-21 11:59:39.160523 Start finding secondary diffusion... Year 2017 ...Year 2018 ...Year 2019 ...Year 2020 ...Year 2021 ...Year 2022 ...Analysis of secondary diffusion done.  ## [1] \"Sectors: 40\" ## 2024-08-21 12:00:43.637087 Start sector attribution... Sector attribution completed.  ## 2024-08-21 12:00:43.656089 Start finding thresholds... Sector 1/40...  2/40...  3/40...  4/40...  5/40...  6/40...  7/40...  8/40...  9/40...  10/40...  11/40...  12/40...  13/40...  14/40...  15/40...  16/40...  17/40...  18/40...  19/40...  20/40...  21/40...  22/40...  23/40...  24/40...  25/40...  26/40...  27/40...  28/40...  29/40...  30/40...  31/40...  32/40...  33/40...  34/40...  35/40...  36/40...  37/40...  38/40...  39/40...  40/40 ## Threshold analysis done. 3747 potential jumps were found.  ## 2024-08-21 12:02:34.470273 Start finding jumps... Year 2014 ... Year 2015 ... Year 2016 ... Year 2017 ... Year 2018 ... Year 2019 ... Year 2020 ... Year 2021 ... Year 2022 ... Jump analysis done. 387 jumps were identified. ## 2024-08-21 12:02:54.108401 Start finding secondary diffusion... Year 2016 ...Year 2017 ...Year 2018 ...Year 2019 ...Year 2020 ...Year 2021 ...Year 2022 ...Analysis of secondary diffusion done.  ## [1] \"Sectors: 80\" ## 2024-08-21 12:03:39.66129 Start sector attribution... Sector attribution completed.  ## 2024-08-21 12:03:39.68074 Start finding thresholds... Sector 1/80...  2/80...  3/80...  4/80...  5/80...  6/80...  7/80...  8/80...  9/80...  10/80...  11/80...  12/80...  13/80...  14/80...  15/80...  16/80...  17/80...  18/80...  19/80...  20/80...  21/80...  22/80...  23/80... Warning: no negative survey in the gap identified in sector 23 and year 2021 after 106 km. The spatial discontinuity that is identified may be due to few surveys done in this area, or space divided into too many sectors. Consider decreasing the number of sectors  ## Warning: no negative survey in the gap identified in sector 23 and year 2022 after 106 km. The spatial discontinuity that is identified may be due to few surveys done in this area, or space divided into too many sectors. Consider decreasing the number of sectors  ##  24/80...  25/80...  26/80...  27/80...  28/80...  29/80...  30/80...  31/80...  32/80...  33/80... Warning: no negative survey in the gap identified in sector 33 and year 2019 after 113 km. The spatial discontinuity that is identified may be due to few surveys done in this area, or space divided into too many sectors. Consider decreasing the number of sectors  ## Warning: no negative survey in the gap identified in sector 33 and year 2020 after 113 km. The spatial discontinuity that is identified may be due to few surveys done in this area, or space divided into too many sectors. Consider decreasing the number of sectors  ##  34/80...  35/80...  36/80...  37/80...  38/80...  39/80...  40/80...  41/80...  42/80...  43/80...  44/80...  45/80...  46/80...  47/80...  48/80...  49/80...  50/80...  51/80...  52/80...  53/80...  54/80...  55/80...  56/80...  57/80...  58/80...  59/80...  60/80...  61/80...  62/80...  63/80...  64/80...  65/80...  66/80...  67/80...  68/80...  69/80...  70/80...  71/80...  72/80...  73/80...  74/80...  75/80...  76/80...  77/80...  78/80...  79/80...  80/80 ## Threshold analysis done. 5034 potential jumps were found.  ## 2024-08-21 12:03:58.297942 Start finding jumps... Year 2014 ... Year 2015 ... Year 2016 ... Year 2017 ... Year 2018 ... Year 2019 ... Year 2020 ... Year 2021 ... Year 2022 ... Jump analysis done. 387 jumps were identified. ## 2024-08-21 12:04:32.755652 Start finding secondary diffusion... Year 2016 ...Year 2017 ...Year 2018 ...Year 2019 ...Year 2020 ...Year 2021 ...Year 2022 ...Analysis of secondary diffusion done. optim ##    s potJumps Jumps    Total_time ## 1 16     4243   387 7.786792 mins ## 2 40     3747   387 2.933721 mins ## 3 80     5034   387 2.136181 mins"},{"path":"https://nbelouard.github.io/jumpID/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nadège Belouard. Author, maintainer.","code":""},{"path":"https://nbelouard.github.io/jumpID/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Belouard N (2024). jumpID: Identify jump dispersal biological invasions. R package version 1.0, https://nbelouard.github.io/jumpID/.","code":"@Manual{,   title = {jumpID: Identify jump dispersal in biological invasions},   author = {Nadège Belouard},   year = {2024},   note = {R package version 1.0},   url = {https://nbelouard.github.io/jumpID/}, }"},{"path":[]},{"path":"https://nbelouard.github.io/jumpID/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Identify jump dispersal in biological invasions","text":"dispersal events occur short distances result continuous species range, human-assisted dispersal promotes occurrence dispersal “jumps”, establishment satellite populations away core invasion. Distinguishing diffusive spread jump dispersal important understand process invasion, evolution, also take efficient management measures. directional analysis species occurrence data, jumpID R package differentiates diffusive spread dispersal jumps biological invasions, identifies secondary diffusion stemming dispersal jumps. jumpID presented GitHub R package applied example invasion spotted lanternfly United States.  spotted lanternfly, Lycorma delicatula (hereafter SLF) insect China invasive pest US. Since initial detection SLF Pennsylvania 2014, large-scale surveys conducted trace progression invasion. unique dataset summarizing SLF presence absence US available lydemapr R package constitutes opportunity study spread SLF. Use package identify analyze dispersal jumps, diffusive spread secondary diffusion biological invasions.","code":""},{"path":[]},{"path":"https://nbelouard.github.io/jumpID/index.html","id":"if-you-wish-to-visualize-the-tutorial-only","dir":"","previous_headings":"Installation","what":"If you wish to visualize the tutorial only","title":"Identify jump dispersal in biological invasions","text":"2 options: * Access “Articles” tab jumpID GitHub website * Download PDF tutorial vignettes folder jumpID GitHub repository","code":""},{"path":"https://nbelouard.github.io/jumpID/index.html","id":"if-you-wish-to-install-the-package-and-execute-the-tutorial","dir":"","previous_headings":"Installation","what":"If you wish to install the package and execute the tutorial","title":"Identify jump dispersal in biological invasions","text":"R terminal tab, cd folder want store project, type: Access content package opening jumpID.Rproj file Rstudio. Install jumpID typing R console: Finally, open tutorial file (.Rmd) vignettes folder, execute code chunks.","code":"git clone https://github.com/nbelouard/jumpID.git devtools::install()"},{"path":"https://nbelouard.github.io/jumpID/index.html","id":"if-you-wish-to-use-the-package-functions-only-without-using-the-tutorial","dir":"","previous_headings":"Installation","what":"If you wish to use the package functions only, without using the tutorial","title":"Identify jump dispersal in biological invasions","text":"Install package typing following line code R console: functions now ready use, help file accessible typing ?function_name.","code":"devtools::install_github(\"nbelouard/jumpID\", dependencies = TRUE) library(jumpID)"},{"path":"https://nbelouard.github.io/jumpID/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Identify jump dispersal in biological invasions","text":"N. Belouard, S. De Bona, M.R. Helmus, .G. Smith, J.E. Behm, 2024. Identifying jump dispersal locations occurrence data invasive species spread: case spotted lanternfly Lycorma delicatula. https://ieco-lab.github.io/jumpID","code":""},{"path":[]},{"path":"https://nbelouard.github.io/jumpID/Readme.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"jumpID, an R package to differentiate diffusive spread and dispersal jumps in biological invasions","text":"dispersal events occur short distances result continuous species range, human-assisted dispersal promotes occurrence dispersal “jumps”, establishment satellite populations away core invasion. Distinguishing diffusive spread jump dispersal important understand process invasion, evolution, also take efficient management measures. directional analysis species occurrence data, jumpID R package differentiates diffusive spread dispersal jumps biological invasions, identifies secondary diffusion stemming dispersal jumps. jumpID presented GitHub R package applied example invasion spotted lanternfly United States.  spotted lanternfly, Lycorma delicatula (hereafter SLF) insect China invasive pest US. Since initial detection SLF Pennsylvania 2014, large-scale surveys conducted trace progression invasion. unique dataset summarizing SLF presence absence US available lydemapr R package constitutes opportunity study spread SLF. Use package identify analyze dispersal jumps, diffusive spread secondary diffusion biological invasions.","code":""},{"path":[]},{"path":"https://nbelouard.github.io/jumpID/Readme.html","id":"if-you-wish-to-visualize-the-tutorial-only","dir":"","previous_headings":"Installation","what":"If you wish to visualize the tutorial only","title":"jumpID, an R package to differentiate diffusive spread and dispersal jumps in biological invasions","text":"2 options: * Access “Articles” tab jumpID GitHub website * Download PDF tutorial vignettes folder jumpID GitHub repository","code":""},{"path":"https://nbelouard.github.io/jumpID/Readme.html","id":"if-you-wish-to-install-the-package-and-execute-the-tutorial","dir":"","previous_headings":"Installation","what":"If you wish to install the package and execute the tutorial","title":"jumpID, an R package to differentiate diffusive spread and dispersal jumps in biological invasions","text":"R terminal tab, cd folder want store project, type: Access content package opening jumpID.Rproj file Rstudio. Install jumpID typing R console: Finally, open tutorial file (.Rmd) vignettes folder, execute code chunks.","code":"git clone https://github.com/nbelouard/jumpID.git devtools::install()"},{"path":"https://nbelouard.github.io/jumpID/Readme.html","id":"if-you-wish-to-use-the-package-functions-only-without-using-the-tutorial","dir":"","previous_headings":"Installation","what":"If you wish to use the package functions only, without using the tutorial","title":"jumpID, an R package to differentiate diffusive spread and dispersal jumps in biological invasions","text":"Install package typing following line code R console: functions now ready use, help file accessible typing ?function_name.","code":"devtools::install_github(\"nbelouard/jumpID\", dependencies = TRUE) library(jumpID)"},{"path":"https://nbelouard.github.io/jumpID/Readme.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"jumpID, an R package to differentiate diffusive spread and dispersal jumps in biological invasions","text":"N. Belouard, S. De Bona, M.R. Helmus, .G. Smith, J.E. Behm, 2024. Identifying jump dispersal locations occurrence data invasive species spread: case spotted lanternfly Lycorma delicatula. https://ieco-lab.github.io/jumpID","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/attribute_sectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine sectors for each occurrence point — attribute_sectors","title":"Determine sectors for each occurrence point — attribute_sectors","text":"full circle 2*pi, sector point determined atan2(y,x), angle point relative horizontal line introduction site","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/attribute_sectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine sectors for each occurrence point — attribute_sectors","text":"","code":"attribute_sectors(dataset, nb_sectors = 8, centroid = c(-75.67534, 40.41524))"},{"path":"https://nbelouard.github.io/jumpID/reference/attribute_sectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine sectors for each occurrence point — attribute_sectors","text":"dataset dataset processed nb_sectors Number sectors divide invasion space (default: 8) centroid Coordinates centroid center circle (long, lat; default: -75.675340, 40.415240)","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/attribute_sectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine sectors for each occurrence point — attribute_sectors","text":"table dataset additional columns: sectors containing total number sectors considered, sectors_nb containing sector number attributed cell","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/attribute_sectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine sectors for each occurrence point — attribute_sectors","text":"","code":"if (FALSE) { # \\dontrun{ new_dataset <- attribute_sectors(dataset) } # }"},{"path":"https://nbelouard.github.io/jumpID/reference/find_jumps.html","id":null,"dir":"Reference","previous_headings":"","what":"Find dispersal jumps — find_jumps","title":"Find dispersal jumps — find_jumps","text":"Find dispersal jumps applied find_thresholds(). Prune points selected due sector limits secondary diffusion.","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/find_jumps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find dispersal jumps — find_jumps","text":"","code":"find_jumps(grid_data = grid_data, potJumps = potJumps, gap_size = 15)"},{"path":"https://nbelouard.github.io/jumpID/reference/find_jumps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find dispersal jumps — find_jumps","text":"grid_data data frame unique points processed, .e., initial grid_data table potJumps data frame potential jumps refined, resulting find_thresholds() gap_size Distance invasion front positive point necessary considered jump, kilometers (default: 15)","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/find_jumps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find dispersal jumps — find_jumps","text":"Two data frames: Jumps containing list jumps, potSecDiff containing potential secondary diffusion processed using find_secDiff()","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/find_jumps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find dispersal jumps — find_jumps","text":"","code":"if (FALSE) { # \\dontrun{ jumps <- find_jumps(dataset) } # }"},{"path":"https://nbelouard.github.io/jumpID/reference/find_jumps_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Find dispersal jumps — find_jumps_wrapper","title":"Find dispersal jumps — find_jumps_wrapper","text":"Find dispersal jumps applied find_thresholds(). Prune points selected due sector limits secondary diffusion.","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/find_jumps_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find dispersal jumps — find_jumps_wrapper","text":"","code":"find_jumps_wrapper(   dataset = grid_data,   nb_sectors = 12,   centroid = c(-75.67534, 40.41524),   gap_size = 15,   negatives = T )"},{"path":"https://nbelouard.github.io/jumpID/reference/find_jumps_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find dispersal jumps — find_jumps_wrapper","text":"dataset data frame unique points processed, ideally dataset_unique resulting find_thresholds() nb_sectors Number sectors invasion range divided centroid long,lat coordinates introduction point gap_size Distance invasion front positive point necessary considered jump, kilometers (default: 15) negatives negative surveys considered? (default: TRUE)","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/find_jumps_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find dispersal jumps — find_jumps_wrapper","text":"Four data frames: Jumps containing jumps, Dist containing limits diffusive spread, diffusion containing diffusion points, secDiff containing secondary diffusion cells","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/find_jumps_wrapper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find dispersal jumps — find_jumps_wrapper","text":"","code":"if (FALSE) { # \\dontrun{ jumps <- find_jumps(dataset) } # }"},{"path":"https://nbelouard.github.io/jumpID/reference/find_secDiff.html","id":null,"dir":"Reference","previous_headings":"","what":"Find secondary diffusion — find_secDiff","title":"Find secondary diffusion — find_secDiff","text":"Find secondary diffusion points applied find_jumps()","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/find_secDiff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find secondary diffusion — find_secDiff","text":"","code":"find_secDiff(   potDiffusion = potDiffusion,   Jumps = Jumps,   diffusers = diffusers,   Dist = preDist,   gap_size = 15 )"},{"path":"https://nbelouard.github.io/jumpID/reference/find_secDiff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find secondary diffusion — find_secDiff","text":"potDiffusion object exported find_jumps Jumps object exported find_jumps diffusers object exported find_jumps Dist object exported find_jumps gap_size Distance necessary point considered jump, kilometers (default: 15)","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/find_secDiff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find secondary diffusion — find_secDiff","text":"data frame secDiff containing secondary diffusion points, data frame Dist containing final thresholds diffusive spread.","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/find_secDiff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find secondary diffusion — find_secDiff","text":"","code":"if (FALSE) { # \\dontrun{ secDiff <- find_secDiff() } # }"},{"path":"https://nbelouard.github.io/jumpID/reference/find_thresholds.html","id":null,"dir":"Reference","previous_headings":"","what":"Find thresholds of diffusive spread — find_thresholds","title":"Find thresholds of diffusive spread — find_thresholds","text":"Find thresholds diffusive spread get list potential jumps. function identifies spatial discontinuities distribution species’ occurrences putative limit continuous, diffusive spread (.e., invasion front) outlying occurrences. function must applied attribute_sectors() find_jumps().","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/find_thresholds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find thresholds of diffusive spread — find_thresholds","text":"","code":"find_thresholds(dataset, gap_size = 15, negatives = TRUE)"},{"path":"https://nbelouard.github.io/jumpID/reference/find_thresholds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find thresholds of diffusive spread — find_thresholds","text":"dataset dataset processed, output attribute_sectors() gap_size Distance invasion front positive point necessary considered jump, kilometers (default: 15) negatives function verify negative surveys found spatial discontinuities? (default: TRUE)","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/find_thresholds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find thresholds of diffusive spread — find_thresholds","text":"Two tables: one table Thresholds containing threshold per year sector, one table potJumps containing list potential jumps find_jumps()","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/find_thresholds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find thresholds of diffusive spread — find_thresholds","text":"","code":"if (FALSE) { # \\dontrun{ thresholds <- find_thresholds(dataset) } # }"},{"path":"https://nbelouard.github.io/jumpID/reference/group_jumps.html","id":null,"dir":"Reference","previous_headings":"","what":"Attribute groups to jumps — group_jumps","title":"Attribute groups to jumps — group_jumps","text":"Identify independent locations jump dispersal","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/group_jumps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attribute groups to jumps — group_jumps","text":"","code":"group_jumps(jumps, gap_size = 15)"},{"path":"https://nbelouard.github.io/jumpID/reference/group_jumps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attribute groups to jumps — group_jumps","text":"jumps dataset processed gap_size Distance invasion front positive point necessary considered jump, kilometers (default: 15)","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/group_jumps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attribute groups to jumps — group_jumps","text":"table dataset additional column named group containing group number jump","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/group_jumps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Attribute groups to jumps — group_jumps","text":"","code":"if (FALSE) { # \\dontrun{ new_dataset <- group_jumps(dataset) } # }"},{"path":"https://nbelouard.github.io/jumpID/reference/rarefy_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Rarefy the jump dataset — rarefy_groups","title":"Rarefy the jump dataset — rarefy_groups","text":"Build rarefied dataset keeping centroid cluster jumps","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/rarefy_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rarefy the jump dataset — rarefy_groups","text":"","code":"rarefy_groups(Jump_groups)"},{"path":"https://nbelouard.github.io/jumpID/reference/rarefy_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rarefy the jump dataset — rarefy_groups","text":"Jump_groups dataset processed","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/rarefy_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rarefy the jump dataset — rarefy_groups","text":"table containing rarefied dataset","code":""},{"path":"https://nbelouard.github.io/jumpID/reference/rarefy_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rarefy the jump dataset — rarefy_groups","text":"","code":"if (FALSE) { # \\dontrun{ new_dataset <- rarefy_groups(dataset) } # }"}]
